function [K, B, M, F, xn] = FE_Dirichlet(L, h, mu0, beta0, sigma0, fun)
% N = L / h - 1;
% 
% % Diffusione -> K (rigidezza) -> phi_i' * phi_j'
% K = mu0/h * ( ...
%     diag(2 * ones(N, 1)) + ...
%     diag(-1 * ones(N-1, 1), 1) + ...
%     diag(-1 * ones(N-1, 1), -1) ...
%     );
% 
% % Trasporto -> B (?) -> phi_i' * phi_j
% B = beta0/2 * ( ...
%     diag(0 * ones(N, 1)) + ...
%     diag(1 * ones(N-1, 1), 1) + ...
%     diag(-1* ones(N-1, 1), -1) ...
%     );
% B(1, 1) = beta0/2 * -1;
% B(end, end) = beta0/2 * 1;
% 
% % Reazione -> M (massa) -> phi_i * phi_j
% M = sigma0 * h/6 * ( ...
%     diag(4 * ones(N, 1)) + ...
%     diag(1 * ones(N-1, 1), 1) + ...
%     diag(1 * ones(N-1, 1), -1) ...
%     );
% 
% % Forzante calcolata con formula del trapezio
% xn = linspace(h, L-h, N);
% F = [h * fun(xn)]';


N = L / h - 1;

% Diffusione -> K (rigidezza) -> phi_i' * phi_j'
K = mu0/h * ( ...
    diag(2 * ones(N, 1)) + ...
    diag(-1 * ones(N-1, 1), 1) + ...
    diag(-1 * ones(N-1, 1), -1) ...
    );

% Trasporto -> B (?) -> phi_i' * phi_j
B = beta0/2 * ( ...
    diag(0 * ones(N, 1)) + ...
    diag(1 * ones(N-1, 1), 1) + ...
    diag(-1* ones(N-1, 1), -1) ...
    );
B(1, 1) = beta0/2 * -1;
B(end, end) = beta0/2 * 1;

% Reazione -> M (massa) -> phi_i * phi_j
M = sigma0 * h/6 * ( ...
    diag(4 * ones(N, 1)) + ...
    diag(1 * ones(N-1, 1), 1) + ...
    diag(1 * ones(N-1, 1), -1) ...
    );

% Forzante calcolata con formula del trapezio
xn = linspace(h, L-h, N);
F = [h * fun(xn)]';

end

